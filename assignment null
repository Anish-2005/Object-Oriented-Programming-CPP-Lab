1. Base class Shape with derived classes (Rectangle, Circle, Triangle)

#include <iostream>
#include <cmath>
using namespace std;

class Shape
{
public:
    virtual double area() = 0;
    virtual double perimeter() = 0;
    virtual ~Shape() {}
};

class Rectangle : public Shape
{
private:
    double len_x;
    double wid_y;
public:
    Rectangle(double m, double n)
    {
        len_x = m;
        wid_y = n;
    }

    double area()
    {
        return len_x * wid_y;
    }

    double perimeter()
    {
        return 2 * (len_x + wid_y);
    }

    ~Rectangle() {}
};

class Circle : public Shape
{
private:
    double rad_q;
public:
    Circle(double r)
    {
        rad_q = r;
    }

    double area()
    {
        return 3.14159 * rad_q * rad_q;
    }

    double perimeter()
    {
        return 2 * 3.14159 * rad_q;
    }

    ~Circle() {}
};

class Triangle : public Shape
{
private:
    double a_t;
    double b_t;
    double c_t;
public:
    Triangle(double a, double b, double c)
    {
        a_t = a;
        b_t = b;
        c_t = c;
    }

    double area()
    {
        double s_v = (a_t + b_t + c_t) / 2.0;
        return sqrt(s_v * (s_v - a_t) * (s_v - b_t) * (s_v - c_t));
    }

    double perimeter()
    {
        return a_t + b_t + c_t;
    }

    ~Triangle() {}
};

int main()
{
    Shape* ptr_arr[3];

    ptr_arr[0] = new Rectangle(4.0, 5.0);
    ptr_arr[1] = new Circle(3.0);
    ptr_arr[2] = new Triangle(3.0, 4.0, 5.0);

    for(int k = 0; k < 3; k++)
    {
        cout << "Area: " << ptr_arr[k]->area() << endl;
        cout << "Perimeter: " << ptr_arr[k]->perimeter() << endl;
    }

    for(int j = 0; j < 3; j++)
    {
        delete ptr_arr[j];
    }

    return 0;
}


---

2. Pure virtual function to achieve data abstraction

#include <iostream>
using namespace std;

class Abstractor
{
public:
    virtual void display() = 0;
};

class DataInfo : public Abstractor
{
public:
    void display()
    {
        cout << "Abstracted Data shown here" << endl;
    }
};

int main()
{
    DataInfo obj_z;
    obj_z.display();
    return 0;
}


---

3. Inline function implementation

#include <iostream>
using namespace std;

class InlineSample
{
private:
    int x_m;
    int y_n;
public:
    InlineSample(int a, int b)
    {
        x_m = a;
        y_n = b;
    }

    inline int sum()
    {
        return x_m + y_n;
    }
};

int main()
{
    InlineSample s_k(5, 10);
    cout << "Sum: " << s_k.sum() << endl;
    return 0;
}


---

4. Structure with pure virtual function

#include <iostream>
using namespace std;

struct StructBase
{
    virtual void func() = 0;
};

struct StructDerived : public StructBase
{
    void func()
    {
        cout << "Pure virtual function in structure" << endl;
    }
};

int main()
{
    StructDerived obj_w;
    obj_w.func();
    return 0;
}


